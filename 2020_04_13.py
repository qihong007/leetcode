'''
在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:
(1) 每次只能移动一个盘子;
(2) 盘子只能从柱子顶端滑出移到下一根柱子;
(3) 盘子只能叠在比它大的盘子上。

请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。

你需要原地修改栈。

示例1:

 输入：A = [2, 1, 0], B = [], C = []
 输出：C = [2, 1, 0]

示例2:

 输入：A = [1, 0], B = [], C = []
 输出：C = [1, 0]


执行用时 :24 ms, 在所有 Python 提交中击败了81.90% 的用户
内存消耗 :13 MB, 在所有 Python 提交中击败了100.00%的用户

'''

class Solution(object):


    #A原始，C目标，B中间
    #pop() 参数为列表元素的索引值,pop()方法有返回值,返回的是列表对应的元素.
    '''
    而实现分治思想的常用方法就是递归。不难发现，如果原问题可以分解成若干个与原问题结构相同但规模较小的子问题时，往往可以用递归的方法解决。具体解决办法如下：

    n = 1 时，直接把盘子从 A 移到 C；
    n > 1 时，
        先把上面 n - 1 个盘子从 A 移到 B（子问题，递归）；
        再将最大的盘子从 A 移到 C；
        再将 B 上 n - 1 个盘子从 B 移到 C（子问题，递归）。

    '''
    def move(self, n, A, B, C):        
        if n == 1:
            C.append(A.pop())
            
            return 
        if n > 1:
            self.move(n-1, A, C, B)
            C.append(A.pop())
            self.move(n-1, B, A, C)


    def hanota(self, A, B, C):
        n = len(A)
        self.move(n, A, B, C)
