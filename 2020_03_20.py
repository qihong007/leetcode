'''
插入。给定两个32位的整数N与M，以及表示比特位置的i与j。编写一种方法，将M插入N，使得M从N的第j位开始，到第i位结束。假定从j位到i位足以容纳M，也即若M = 10 011，那么j和i之间至少可容纳5个位。例如，不可能出现j = 3和i = 2的情况，因为第3位和第2位之间放不下M。

示例1:

 输入：N = 10000000000, M = 10011, i = 2, j = 6
 输出：N = 10001001100

示例2:

 输入： N = 0, M = 11111, i = 0, j = 4
 输出：N = 11111

就是先把N数字上i到j的位置都替代成0，然后再让M左移i位加上替换成0的N


执行用时 :20 ms, 在所有 Python 提交中击败了72.22% 的用户
内存消耗 :12.8 MB, 在所有 Python 提交中击败了100.00%的用户
<< 是左移，末位补0，类比十进制数在末尾添0相当于原数乘以10，x<<1是将x的二进制表示左移一位，相当于原数x乘2

100000
654321

0xFFFFFFFF 为 1111 1111 1111 1111 1111 1111 1111 1111

如果要计算13^17，则计算方法如下：位运算相同为0不同为1，位运算可用于检验两个集合元素是否一样，详情见2020_03_02.py

01101 <====13
10001 <====17
---------
11100 ====>28

a = 60            # 60 = 0011 1100 
b = 13            # 13 = 0000 1101 
c = 0
 
c = a & b;        # 12 = 0000 1100
print "1 - c 的值为：", c



'''
class Solution(object):
    def insertBits(self, N, M, i, j):
        #i=1, j=4 这一步求i和j之间有几位数，得到1111
        temp = (1 << (j - i +1)) - 1
        mask = 0xFFFFFFFF
        #temp<<i,得11110
        #得到 1111 1111 1110 0001
        
        temp = mask ^ (temp << i)
        M <<= i
        #N & temp 这一步得到把N数字上i到j的位置都替代成0
        # | M 是一个相加
        return (N & temp) | M
