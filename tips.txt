Line 6: IndentationError: expected an indented block
在编译时会出现这样的错IndentationError:expected an indented block说明此处需要缩进，你只要在出现错误的那一行，按空格或Tab（但不能混用）键缩进就行。

>> 和 <<都是位运算，对二进制数进行移位操作。
<< 是左移，末位补0，类比十进制数在末尾添0相当于原数乘以10，x<<1是将x的二进制表示左移一位，相当于原数x乘2。比如整数4在二进制下是100，4<<1左移1位变成1000(二进制)，结果是8。
>>是右移，右移1位相当于除以2。
而>>=和<<=，就是对变量进行位运算移位之后的结果再赋值给原来的变量，可以类比赋值运算符+=和-=可以理解。
比如x>>=2， 就是把变量x右移2位，再保留x操作后的值。

如果要计算13^17，则计算方法如下：位运算相同为0不同为1，位运算可用于检验两个集合元素是否一样，详情见2020_03_02.py

01101 <====13
10001 <====17
---------
11100 ====>28

若13^13 ===》0
则
01101 <====13
01101 <====13
---------
00000 ====>0

python中没有字符之间的直接相减运算，但可以通过ord()函数实现
ord()函数主要用来返回对应字符的ascii码
>>> ord('9')-ord('0')
9
字符相减得到数字要用ord（）不然会报错

位运算符 	说明
<< 	按位左移，左移n位相当于乘以2的n次方
>> 	按位右移 ，左移n位相当于除以2的n次方
& 	按位与，二进制位数同且为1结果位为1
l 	按位或 ，二进制位数或有1结果位为1
^ 	按位异或 ，二进制位数不同结果位为1
~ 	按位取反，二进制位0和1结果位互换
————————————————

str = ‘0123456789’
print str[0:3] #截取第一位到第三位的字符
print str[:] #截取字符串的全部字符
print str[6:] #截取第七个字符到结尾
print str[:-3] #截取从头开始到倒数第三个字符之前
print str[2] #截取第三个字符
print str[-1] #截取倒数第一个字符
print str[::-1] #创造一个与原字符串顺序相反的字符串
print str[-3:-1] #截取倒数第三位与倒数第一位之前的字符
print str[-3:] #截取倒数第三位到结尾
print str[:-5:-3] #逆序截取，具体啥意思没搞明白？

str = "this is string example....wow!!! this is really string";
print str.replace("is", "was");
print str.replace("is", "was", 3);

thwas was string example....wow!!! thwas was really string
thwas was string example....wow!!! thwas is really string

python 从后往前面遍历
 for j in range(len(second)-1, -1, -1):
